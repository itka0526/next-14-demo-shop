generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// datasource db {
//   provider = "sqlite"
//   url      = "file:./sqlite.db"
// }

// Users
model User {
  id                Int            @id @default(autoincrement())
  name              String         @unique
  email             String         @unique
  password          String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  role              String         @default("USER")
  // Favorited, reviewed, basketed
  userReviews       Review[]
  userBasketedItems BasketedItem[]
  // Profile
  avatarImage       String         @default("/placeholder-user.jpg")

  @@index([email])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  stars     Int
  comment   String   @default("")
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([productId])
}

model BasketedItem {
  id        Int     @id @default(autoincrement())
  userId    Int
  productId Int
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
  @@index([userId])
}

// Products
model Product {
  id                   Int            @id @default(autoincrement())
  subCategoryId        Int
  productDisplayName   String         @default("")
  productName          String         @unique @default(uuid())
  description          String         @default("")
  images               Image[]
  productReviews       Review[]
  productBasketedUsers BasketedItem[]
  price                Int
  subCategory          SubCategory    @relation(fields: [subCategoryId], references: [id], onDelete: Cascade)
  featured             Boolean        @default(false)

  @@index([productName])
}

model Image {
  id Int @id @default(autoincrement())

  name String
  size Int
  type String
  key  String
  url  String

  productId Int?
  product   Product? @relation(fields: [productId], references: [id])
}

model SubCategory {
  id                     Int       @id @default(autoincrement())
  categoryId             Int
  subCategoryDisplayName String    @default("")
  subCategoryName        String    @unique @default(uuid())
  category               Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  products               Product[]

  @@index([subCategoryName])
}

model Category {
  id                  Int           @id @default(autoincrement())
  categoryDisplayName String        @default("")
  categoryName        String        @unique @default(uuid())
  subCategories       SubCategory[]

  @@index([categoryName])
}

model NewsletterSubscriber {
  id         Int      @id @default(autoincrement())
  email      String   @unique
  subscribed Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([email])
}
